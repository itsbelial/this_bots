from aiogram import types, Dispatcher
import markups as nav
from markups import cb
from handlers.is_chat_subscribe import is_subscribe
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from bot_data import bot, db, feedback_link, crypto_price_for_per, crypto_name, min_withdraw, bot_name
from decimal import *


class get_address(StatesGroup):
    address = State()
    confirm = State()


async def main_function(call: types.CallbackQuery, callback_data: dict):
    action = callback_data["action"]
    if action == "update_balance":
        try:
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        text="ü•≥ <b>–î–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ</b>\n\n"
                                             f"<b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑—å—è–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏</b> <code>{min_withdraw} {crypto_name}</code> <b>–Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n\n"
                                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                             "üë§–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: "
                                             f"<code>https://t.me/{bot_name}?start={call.from_user.id}</code>\n\n"
                                             f"üöÄ–û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å: üëâ <a href='{feedback_link}'>–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã</a>\n"
                                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                             f"–£ –≤–∞—Å {db.count_referrers(call.from_user.id)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                                             f"–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{db.get_client_data(call.from_user.id)[1]} {crypto_name} </code>  (<code>{Decimal(db.get_client_data(call.from_user.id)[1]) * Decimal(crypto_price_for_per)}$</code>)\n"
                                             f"–í–∞—à ID: <code>{call.from_user.id}</code>",
                                        parse_mode=types.ParseMode.HTML, disable_web_page_preview=True,
                                        reply_markup=nav.main_keyboard)
        except: pass

    if action == "withdraw_money":
        if Decimal(db.get_client_data(call.from_user.id)[1]) < Decimal(min_withdraw):
            await call.answer(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤—ã–≤–æ–¥–∞\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - {min_withdraw} {crypto_name}", show_alert=True)
        else:
            await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ üëá")
            await get_address.address.set()

    await call.answer()


async def crypto_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["address"] = message.text
    await bot.send_message(message.from_user.id, f"–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞\n\n<b>{data['address']}</b>\n\n", reply_markup=nav.confirm_keyboard, parse_mode=types.ParseMode.HTML)
    await get_address.next()


async def crypto_confirm(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    action = callback_data["action"]
    current_state = await state.get_state()
    if current_state is None:
        return
    if action == "no":
        await bot.send_message(call.from_user.id, "–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
    if action == "yes":
        db.update_client_data(call.from_user.id, "0.0")
        await bot.send_message(call.from_user.id, "–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞\n\n–í —Ç–µ—á–µ–Ω–∏–µ <b>1-7</b> —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", parse_mode=types.ParseMode.HTML)
    await state.finish()
    await call.answer()
    await is_subscribe(call)


def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(main_function, cb.filter(action=["update_balance", "withdraw_money"]))
    dp.register_message_handler(crypto_address, state=get_address.address)
    dp.register_callback_query_handler(crypto_confirm, cb.filter(action=["no", "yes"]), state="*")