from aiogram import types, Dispatcher
import markups as nav
from bot_data import bot, db, subscribe_chat_id, subscribe_chat_link, subscribe_chat_name, feedback_link, crypto_price_for_per, crypto_name, min_withdraw, bot_name
from decimal import *


async def is_subscribe(message: types.Message):

    user_channel_status = await bot.get_chat_member(chat_id=subscribe_chat_id, user_id=message.from_user.id)
    if user_channel_status["status"] != "left":
        await bot.send_message(message.from_user.id, "ü•≥ <b>–î–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ</b>\n\n"
                                                     f"<b>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑—å—è–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏</b> <code>{min_withdraw} {crypto_name}</code> <b>–Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</b>\n\n"
                                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                                     "üë§–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: "
                                                     f"<code>https://t.me/{bot_name}?start={message.from_user.id}</code>\n\n"
                                                     f"üöÄ–û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å: üëâ <a href='{feedback_link}'>–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã</a>\n"
                                                     "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                                                     f"–£ –≤–∞—Å {db.count_referrers(message.from_user.id)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                                                     f"–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{db.get_client_data(message.from_user.id)[1]} {crypto_name} </code>  (<code>{Decimal(db.get_client_data(message.from_user.id)[1]) * Decimal(crypto_price_for_per)}$</code>)\n"
                                                     f"–í–∞—à ID: <code>{message.from_user.id}</code>", parse_mode=types.ParseMode.HTML, disable_web_page_preview=True, reply_markup=nav.main_keyboard)
    else:
        try:
            await bot.delete_message(message_id=message.message_id, chat_id=message.from_user.id)
            await bot.send_message(message.from_user.id,
                                   "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. üëá\n\n"
                                   f"üëâ <a href='{subscribe_chat_link}'>{subscribe_chat_name}</a>",
                                   parse_mode=types.ParseMode.HTML, reply_markup=nav.check_subscribe)
        except:
            await bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. üëá\n\n"
                                                         f"üëâ <a href='{subscribe_chat_link}'>{subscribe_chat_name}</a>", parse_mode=types.ParseMode.HTML, reply_markup=nav.check_subscribe)


async def check(call: types.CallbackQuery):
    await is_subscribe(call)
    await call.answer()


def register_handlers_subscribe(dp: Dispatcher):
    dp.register_message_handler(is_subscribe)
    dp.register_callback_query_handler(check, text_contains="check_subscribe")